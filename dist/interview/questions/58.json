{
    "type": "reply",
    "tag": "ios",
    "difficulty": "1",
    "from": "http://www.jianshu.com/p/20f8d59eb8fb",
    "description": "<p>block 实现原理</p>\n",
    "answer": "<p>答: Objective-C是对C语言的扩展，block的实现是基于指针和函数指针。</p>\n<p>从计算语言的发展，最早的goto，高级语言的指针，到面向对象语言的block，从机器的思维，一步步接近人的思维，以方便开发人员更为高效、直接的描述出现实的逻辑(需求)。</p>\n<p>使用实例</p>\n<p>cocoaTouch框架下动画效果的Block的调用</p>\n<p>使用typed声明block</p>\n<p>typedef void(^didFinishBlock) (NSObject *ob);</p>\n<p>这就声明了一个didFinishBlock类型的block，</p>\n<p>然后便可用</p>\n<p>@property (nonatomic,copy) didFinishBlock finishBlock;</p>\n<p>声明一个blokc对象，注意对象属性设置为copy，接到block 参数时，便会自动复制一份。</p>\n<p>__block是一种特殊类型，</p>\n<p>使用该关键字声明的局部变量，可以被block所改变，并且其在原函数中的值会被改变。</p>\n<p>60.关于block</p>\n<p>答: 面试时，面试官会先问一些，是否了解block，是否使用过block，这些问题相当于开场白，往往是下面一系列问题的开始，所以一定要如实根据自己的情况回答。</p>\n<p>1). 使用block和使用delegate完成委托模式有什么优点?</p>\n<p>首先要了解什么是委托模式，委托模式在iOS中大量应用，其在设计模式中是适配器模式中的对象适配器，Objective-C中使用id类型指向一切对象，使委托模式更为简洁。了解委托模式的细节：</p>\n<p>iOS设计模式—-委托模式</p>\n<p>使用block实现委托模式，其优点是回调的block代码块定义在委托对象函数内部，使代码更为紧凑;</p>\n<p>适配对象不再需要实现具体某个protocol，代码更为简洁。</p>\n<p>2). 多线程与block</p>\n<p>GCD与Block</p>\n<p>使用 dispatch_async 系列方法，可以以指定的方式执行block</p>\n<p>GCD编程实例</p>\n<p>dispatch_async的完整定义</p>\n<p>void dispatch_async(</p>\n<p>dispatch_queue_t queue,</p>\n<p>dispatch_block_t block);</p>\n<p>功能：在指定的队列里提交一个异步执行的block，不阻塞当前线程</p>\n<p>通过queue来控制block执行的线程。主线程执行前文定义的 finishBlock对象</p>\n<p>dispatch_async(dispatch_get_main_queue(),^(void){finishBlock();});</p>\n<p>62.谈谈Object-C的内存管理方式及过程？</p>\n<p>答: 1).当你使用new,alloc和copy方法创建一个对象时,该对象的保留计数器值为1.当你不再使用该对象时,你要负责向该对象发送一条release或autorelease消息.这样,该对象将在使用寿命结束时被销毁.</p>\n<p>2).当你通过任何其他方法获得一个对象时,则假设该对象的保留计数器值为1,而且已经被设置为自动释放,你不需要执行任何操作来确保该对象被清理.如果你打算在一段时间内拥有该对象,则需要保留它并确保在操作完成时释放它.</p>\n<p>3).如果你保留了某个对象,你需要(最终)释放或自动释放该对象.必须保持retain方法和release方法的使用次数相等.</p>\n<p>63.Object-C有私有方法吗？私有变量呢？</p>\n<p>答: objective-c – 类里面的方法只有两种, 静态方法和实例方法. 这似乎就不是完整的面向对象了,按照OO的原则就是一个对象只暴露有用的东西. 如果没有了私有方法的话, 对于一些小范围的代码重用就不那么顺手了. 在类里面声名一个私有方法</p>\n<p>@interface Controller : NSObject { NSString *something; }</p>\n<ul>\n<li>(void)thisIsAStaticMethod;</li>\n</ul>\n<p>– (void)thisIsAnInstanceMethod;</p>\n<p>@end</p>\n<p>@interface Controller (private) -</p>\n<p>(void)thisIsAPrivateMethod;</p>\n<p>@end</p>\n<p>@private可以用来修饰私有变量</p>\n<p>在Objective‐C中，所有实例变量默认都是私有的，所有实例方法默认都是公有的</p>\n<p>64.Object-C有多继承吗？没有的话用什么代替？cocoa 中所有的类都是NSObject 的子类</p>\n<p>答: 多继承在这里是用protocol 委托代理 来实现的</p>\n<p>你不用去考虑繁琐的多继承 ,虚基类的概念.</p>\n<p>ood的多态特性 在 obj-c 中通过委托来实现.</p>\n<p>65.内存管理 Autorelease、retain、copy、assign的set方法和含义？</p>\n<p>答: 1).你初始化(alloc/init)的对象，你需要释放(release)它。例如：</p>\n<p>NSMutableArray aArray = [[NSArray alloc] init]; 后，需要 [aArray release];</p>\n<p>2).你retain或copy的，你需要释放它。例如：</p>\n<p>[aArray retain] 后，需要 [aArray release];</p>\n<p>3).被传递(assign)的对象，你需要斟酌的retain和release。例如：</p>\n<p>obj2 = [[obj1 someMethod] autorelease];</p>\n<p>对象2接收对象1的一个自动释放的值，或传递一个基本数据类型(NSInteger，NSString)时：你或希望将对象2进行retain，以防止它在被使用之前就被自动释放掉。但是在retain后，一定要在适当的时候进行释放。</p>\n<p>关于索引计数(Reference Counting)的问题</p>\n<p>retain值 = 索引计数(Reference Counting)</p>\n<p>NSArray对象会retain(retain值加一)任何数组中的对象。当NSArray被卸载(dealloc)的时候，所有数组中的对象会 被 执行一次释放(retain值减一)。不仅仅是NSArray，任何收集类(Collection Classes)都执行类似操作。例如 NSDictionary，甚至UINavigationController。</p>\n<p>Alloc/init建立的对象，索引计数为1。无需将其再次retain。</p>\n<p>[NSArray array]和[NSDate date]等“方法”建立一个索引计数为1的对象，但是也是一个自动释放对象。所以是本地临时对象，那么无所谓了。如果是打算在全Class中使用的变量(iVar)，则必须retain它。</p>\n<p>缺省的类方法返回值都被执行了“自动释放”方法。(*如上中的NSArray)</p>\n<p>在类中的卸载方法“dealloc”中，release所有未被平衡的NS对象。(*所有未被autorelease，而retain值为1的)</p>\n",
    "options": []
}