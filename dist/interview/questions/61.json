{
    "type": "reply",
    "tag": "ios",
    "difficulty": "1",
    "from": "http://www.jianshu.com/p/20f8d59eb8fb",
    "description": "<p>ViewController的didReceiveMemoryWarning怎么被调用：</p>\n",
    "answer": "<p>答:[supper didReceiveMemoryWarning];</p>\n<p>69.什么时候用delegate,什么时候用Notification?</p>\n<p>答: delegate针对one-to-one关系，用于sender接受到reciever的某个功能反馈值。</p>\n<p>notification针对one-to-one/many/none,reciver,用于通知多个object某个事件。</p>\n<p>70.用预处理指令#define声明一个常数，用以表明1年中有多少秒（忽略闰年问题）</p>\n<p>答:</p>\n<h1 id=\"define-seconds-per-year-60-60-24-365-ul\">define SECONDS_PER_YEAR (60 <em> 60 </em> 24 * 365)UL</h1>\n<p>我在这想看到几件事情：</p>\n<h1 id=\"define-%E8%AF%AD%E6%B3%95%E7%9A%84%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%EF%BC%88%E4%BE%8B%E5%A6%82%EF%BC%9A%E4%B8%8D%E8%83%BD%E4%BB%A5%E5%88%86%E5%8F%B7%E7%BB%93%E6%9D%9F%EF%BC%8C%E6%8B%AC%E5%8F%B7%E7%9A%84%E4%BD%BF%E7%94%A8%EF%BC%8C%E7%AD%89%E7%AD%89%EF%BC%89\">define 语法的基本知识（例如：不能以分号结束，括号的使用，等等）</h1>\n<p>懂得预处理器将为你计算常数表达式的值，因此，直接写出你是如何计算一年中有多少秒而不是计算出实际的值，是更清晰而没有代价的。</p>\n<p>意识到这个表达式将使一个16位机的整型数溢出-因此要用到长整型符号L,告诉编译器这个常数是的长整型数。</p>\n<p>如果你在你的表达式中用到UL（表示无符号长整型），那么你有了一个好的起点。记住，第一印象很重要。</p>\n<p>71.写一个”标准&quot;宏MIN ，这个宏输入两个参数并返回较小的一个。</p>\n<h1 id=\"define-min-a-b-%EF%BC%88%EF%BC%88a%EF%BC%89-b-a-b\">define MIN(A,B) （（A） &lt;= (B) ? (A) : (B))</h1>\n<p>这个测试是为下面的目的而设的：</p>\n<p>标识#define在宏中应用的基本知识。这是很重要的，因为直到嵌入(inline)操作符变为标准C的一部分，宏是方便产生嵌入代码的唯一方</p>\n<p>法，</p>\n<p>对于嵌入式系统来说，为了能达到要求的性能，嵌入代码经常是必须的方法。</p>\n<p>三重条件操作符的知识。这个操作符存在C语言中的原因是它使得编译器能产生比 if-then-else 更优化的代码，了解这个用法是很重要的。</p>\n<p>懂得在宏中小心地把参数用括号括起来</p>\n<p>我也用这个问题开始讨论宏的副作用，例如：当你写下面的代码时会发生什么事？</p>\n<p>least = MIN(*p++, b);</p>\n<p>结果是：</p>\n<p>((<em>p++) &lt;= (b) ? (</em>p++) : (*p++))</p>\n<p>这个表达式会产生副作用，指针p会作三次++自增操作。</p>\n<p>72.关键字const有什么含意？修饰类呢?static的作用,用于类呢?还有extern c的作用</p>\n<p>答：</p>\n<p>const 意味着&quot;只读&quot;，下面的声明都是什么意思？</p>\n<p>const int a;</p>\n<p>int const a;</p>\n<p>const int *a;</p>\n<p>int * const a;</p>\n<p>int const * a const;</p>\n<p>前两个的作用是一样，a是一个常整型数。</p>\n<p>第三个意味着a是一个指向常整型数的指针（也就是，整型数是不可修改的，但指针可以）。</p>\n<p>第四个意思a是一个指向整型数的常指针（也就是说，指针指向的整型数是可以修改的，但指针是不可修改的）。</p>\n<p>最后一个意味着a是一个指向常整型数的常指针（也就是说，指针指向的整型数是不可修改的，同时指针也是不可修改的）。</p>\n<p>结论：</p>\n<p>关键字const的作用是为给读你代码的人传达非常有用的信息，实际上，声明一个参数为常量是为了告诉了用户这个参数的应用目的。</p>\n<p>如果你曾花很多时间清理其它人留下的垃圾，你就会很快学会感谢这点多余的信息。（当然，懂得用const的程序员很少会留下的垃圾让别人来清理的）  通过给优化器一些附加的信息，使用关键字const也许能产生更紧凑的代码。合理地使用关键字const可以使编译器很自然地保护那些不希望被改变的参数，防止其被无意的代码修改。简而言之，这样可以减少bug的出现。</p>\n<p>1).欲阻止一个变量被改变，可以使用 const 关键字。在定义该 const 变量时，通常需要对它进行初</p>\n<p>始化，因为以后就没有机会再去改变它了；</p>\n<p>2).对指针来说，可以指定指针本身为 const，也可以指定指针所指的数据为 const，或二者同时指</p>\n<p>定为 const；</p>\n<p>3).在一个函数声明中，const 可以修饰形参，表明它是一个输入参数，在函数内部不能改变其值；</p>\n<p>4).对于类的成员函数，若指定其为 const 类型，则表明其是一个常函数，不能修改类的成员变量；</p>\n<p>5).对于类的成员函数，有时候必须指定其返回值为 const 类型，以使得其返回值不为“左值”。</p>\n",
    "options": []
}